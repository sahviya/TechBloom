my schema.prism file generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  firstName String?
  lastName  String?
  profileImageUrl String?
  theme     String?  @default("dark")
  language  String?  @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  journalEntries   JournalEntry[]
  communityPosts   CommunityPost[]
  postLikes        PostLike[]
  postComments     PostComment[]
  moodEntries      MoodEntry[]
  aiConversations  AiConversation[]
}

model JournalEntry {
  id        String   @id @default(uuid())
  userId    String
  title     String?
  content   String
  mood      String?
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunityPost {
  id        String   @id @default(uuid())
  userId    String
  content   String
  imageUrl  String?
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  likesRel PostLike[]
  comments PostComment[]
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model PostComment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MoodEntry {
  id        String   @id @default(uuid())
  userId    String
  mood      String
  notes     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiConversation {
  id        String   @id @default(uuid())
  userId    String
  message   String
  response  String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


